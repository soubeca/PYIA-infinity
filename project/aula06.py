# Defini√ß√£o de Dados:

# Defina estruturas de dados para representar tarefas. Cada tarefa pode incluir

# informa√ß√µes como nome, descri√ß√£o, prioridade e categoria. Voc√™ pode usar
# dicion√°rios para representar as tarefas.

# Fun√ß√µes:
# Crie fun√ß√µes para adicionar tarefas, listar tarefas, marcar tarefas
# como conclu√≠das, exibir tarefas por prioridade ou categoria, e outras
# funcionalidades que desejar.

# Menu de Comandos:
# Crie um menu de comandos de linha de comando que permita ao
# usu√°rio interagir com o programa.

taskList = []

def addTask(taskList, taskName, taskDescrption, taskPriority, taskCategory):
  task = {
    'name': taskName,
    'description': taskDescrption,
    'priority': taskPriority,
    'category': taskCategory,
    'completed': False
  }
  taskList.append(task)
  print(f"‚úÖTarefa adicionada com sucesso!")

def list(taskList):
    
  if not taskList:
    print('‚òπÔ∏è Voc√™ ainda n√£o criou uma tarefa!')
    
  else:
    num = 1
    for task in taskList:
      status = '‚úÖ' if task['completed'] else '‚ùå'
      print(f'''
            {num}. {task['name']}
            Descri√ß√£o: {task['description']}
            Prioridade: {task['priority']}
            Categoria: {task['category']}
            Conclu√≠da: {status}\n
      ''')
      num += 1


def priorityList (taskList): 
    orderedPriority = {
        'alta': 1,
        'm√©dia': 2,
        'baixa': 3
    }
    
    if not taskList:
        print('‚òπÔ∏è Voc√™ ainda n√£o criou uma tarefa!')
    
    else:
        positionTasks = taskList.copy()
        positionTasks.sort(key=lambda x: orderedPriority[x['priority']])
        
        num = 1
        for task in positionTasks:
            status = '‚úÖ' if task['completed'] else '‚ùå'
            print(f'''
                    {num}. {task['name']}
                    Descri√ß√£o: {task['description']}
                    Prioridade: {task['priority']}
                    Categoria: {task['category']}
                    Conclu√≠da: {status}\n
            ''')
            num += 1

def checkList(taskList, cheking):
    value = cheking - 1
    if 0 <= value < len(taskList):
        taskList[value]['completed'] = True
        print(f"Tarefa '{taskList[value]['name']}' marcada como conclu√≠da.")
    



while True:
    print('''
        ::::::::::: MY TODO LIST :::::::::::::
        
        Ol√°, sou seu assistente de tarefas!‚ò∫Ô∏è
        Escolha o n√∫mero da op√ß√£o que deseja:
        
        1. Adicionar tarefas
        2. Listar tarefas
        3. Listar tarefas por prioridade
        4. Checklist
        5. Sair
        
        ''')
    inputUser = int(input('Digite a op√ß√£o desejada: '))
    
    if inputUser == 1:
        taskName = str(input('Qual o nome da tarefa? '))
        taskDescription = str(input('Descreva sua tarefa: '))
        taskPriority = str(input('Descreva qual a prioridade dela entre: Alta, M√©dia e Baixa:  ')).lower()
        taskCategory = str(input('Qual a categoria da tarefa? '))
        
        addTask(taskList, taskName, taskDescription, taskPriority, taskCategory)
           
    elif inputUser == 2:
        list(taskList)
        
    elif inputUser == 3:
        priorityList(taskList)
        
    elif inputUser == 4:
        if not taskList:
            print('‚òπÔ∏è Voc√™ ainda n√£o criou uma tarefa!')
        else:
            print('Escolha o n√∫mero da tarefa que deseja marcar como conclu√≠da: ')
            list(taskList)
            cheking = int(input('Digite o n√∫mero da tarefa: '))
            checkList(taskList, cheking)
        
    elif inputUser == 5:
        print('üôÇAt√© a pr√≥xima!')
        break
    else:
        print('üòÖOps, escolha uma das minhas op√ß√µes!')
  
  
  
